***********Données***********

Regle : liste dont le dernier élément est la conclusion de ladite règle.

*****************************



*****************************
********ALGORITHMES**********
*****************************

créerRegle(Regle nouvelleRegle) : liste
Debut
	nouvelleRegle <- new(regle)
	retourner nouvelleRegle
Fin

*****************************

nouvelleProposition(String proposition) : Regle
Debut
	nouvelleProposition <- new(proposition)
	retourner nouvelleProposition
Fin

*****************************

nouvelleConclusiuon(String conclusion) : Regle
Debut
	nouvelleConclusion <- new(conclusion)
	retourner nouvelleConclusion
Fin

*****************************

est_vide(Regle r) : Booléen
Debut
	si r est NULL
		retourner VRAI
	sinon
		retourner FAUX
Fin

*****************************

comptage_val(Regle r) : integer
Debut
c = 0
Regle l = r
	si r est NULL
		retourner 0
	sinon
		tant que est_vide(l) est FAUX faire
			c = c + 1
			l <- reste(l)
		fin tant que
	retourner c
Fin 

*****************************

premisse(Regle r) : string
Debut
	si est_vide(r) est VRAI alors
		reourner NULL
	sinon
		retourner premisse(r)
Fin

*****************************

conclusion(Regle r) : string
Debut
Regle l = r
	si est_vide(r) est VRAI alors
		retourner NULL
	sinon
		tant que est_vide(l) est FAUX faire
			l <- reste(l)
		fin tant que
		conclusion(l) <- l
		retourner conclusion(l)
Fin

*****************************

ajouter_proposition(Regle r, string proposition) : Regle
Debut
Regle l = r
	si est_vide(l) est VRAI alors
		nouvelleProposition(proposition)
		premisse(l) <- proposition
		suiv(l) <- NULL
	sinon
		tant que est_vide(l) est FAUX faire
			l <- suiv(l)
		fin tant que
		nouvelleProposition(proposition)
		conclusion(l) <- l
		l <- proposition
		suiv(l) <- conclusion 
	fin sinon
	retourner l
Fin

*****************************

creer_conclusion(Regle r, string conclusion) : Regle
Debut
Regle l = r
	si est_vide(l) est VRAI alors
		conclusion est NULL
	sinon
		tant que est_vide(suiv(l)) est FAUX faire
			l <- suiv(l)
		fin tant que
		nouvelleConclusion(conclusion)
		suiv(l) <- conclusion
Fin

*****************************

est_premisse(Regle r, string proposition) : Booléen
Debut
contient = FAUX
Regle l = r
	tant que est_vide(l) est FAUX et contient est FAUX faire
		si val(l) = proposition alors
			contient = VRAI 
		sinon
			l <- reste(l)
	fin tant que 
	retourner contient
fin 

*****************************
			

